version: 2.1

orbs:
  slack: circleci/slack@4.2.0
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the frontend code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
      - run:
          name: Compile the backend code
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front end Test Install
          command: |
            cd frontend
            npm install
      - run:
          name: Front end code Run
          command: |
            cd frontend
            npm run test
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back end Test Install
          command: |
            cd backend
            npm install
      - run:
          name: Back end code Run
          command: |
            cd backend
            npm run test
      - store_test_results:
          path: ./Backend/test_results
      - store_artifacts:
          path: ./Backend/test_results  

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          echo $SLACK_DEFAULT_CHANNEL 
      - run:
          name: Frontend Analyze
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the Frontend code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: udacity-projects
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: udacity-projects
          event: pass
          template: success_tagged_deploy_1

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          echo $SLACK_DEFAULT_CHANNEL 
      - run:
          name: Backendend Analyze
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: udacity-projects
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: udacity-projects
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Create/Update backend infrastructure via AWS CloudFormation
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend-${WorkFlowID} \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${WorkFlowID}"
      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${WorkFlowID}" \
              --output text)
              
            curl -H "Content-Type: text/plain" -H "token: 3f00469f-a5c5-47c4-b894-bb2becdab85a" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - run:
          name: Create/Update frontend infrastructure via AWS CloudFormation
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${WorkFlowID} \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${WorkFlowID}"
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${WorkFlowID}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt


  configure-infrastructure:
    docker: 
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["50:36:20:79:21:43:f6:97:21:f7:e3:ab:24:73:bf:af"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: install npm
          command: |
            cd backend
            npm install
      - run:
          name: run migrations
          command: |
            cd backend
            npm run run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend/
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "migration complete"
              curl -H "Content-Type: text/plain" -H "token: 30e34287-555c-47da-9280-a30c036c0cc8" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${WorkFlowID}
            else
              echo "DB migration failure"
              curl -H "Content-Type: text/plain" -H "token: 30e34287-555c-47da-9280-a30c036c0cc8" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${WorkFlowID}
            fi
            echo "WorkflowID=${WorkFlowID}"





  deploy-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend from backend URL
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "token: 3f00469f-a5c5-47c4-b894-bb2becdab85a" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${WorkFlowID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
      - analyze-backend:
          context: circleci-slack
          requires:
            - build-backend
      - analyze-frontend:
          context: circleci-slack
          requires:
            - build-frontend

      ## INFRASTRUCTURE
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - analyze-backend
            - analyze-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires:
            - run-migrations