version: 2.1

orbs:
  slack: circleci/slack@4.2.0
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the frontend code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
      - run:
          name: Compile the backend code
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front end Test Install
          command: |
            cd frontend
            npm install
      - run:
          name: Front end code Run
          command: |
            cd frontend
            npm run test
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back end Test Install
          command: |
            cd backend
            npm install
      - run:
          name: Back end code Run
          command: |
            cd backend
            npm run test
      - store_test_results:
          path: ./Backend/test_results
      - store_artifacts:
          path: ./Backend/test_results  

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          echo $SLACK_DEFAULT_CHANNEL 
      - run:
          name: Frontend Analyze
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the Frontend code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: udacity-projects
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: udacity-projects
          event: pass
          template: success_tagged_deploy_1

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          echo $SLACK_DEFAULT_CHANNEL 
      - run:
          name: Backendend Analyze
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the Backend
          command: |
            cd backend
            npm audit --audit-level=critical
      - slack/notify:
          channel: udacity-projects
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: udacity-projects
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create/Update frontend infrastructure via AWS CloudFormation
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-frontend-${WorkflowID} \
              --template-file .circleci/files/frontend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${WorkflowID}"
      - run:
          name: Create/Update backend infrastructure via AWS CloudFormation
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-backend-${WorkflowID} \
              --template-file .circleci/files/backend.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${WorkflowID}"
      - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters 'Name=tag:Name,Values=udapeople-backend-ec2-*' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${PUBLIC_DNS} \
               https://api.memstash.io/values/public_dns

workflows:
  default:
    jobs:
      - build-frontend
      - test-frontend:
          requires: 
            - build-frontend
      - analyze-frontend:
          context: circleci-slack
          requires:
            - test-frontend

      - build-backend
      - test-backend:
          requires: 
            - build-backend
      - analyze-backend:
          context: circleci-slack
          requires:
            - test-backend

      - deploy-infrastructure:
          filters:
            branches:
              only: master
