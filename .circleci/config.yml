version: 2.1

commands: 
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "S3 bucket name: s3://udapeople-<< parameters.workflow_id >>"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            RES=$(curl -H "token: 7de83cae-8940-4867-b238-f6888e668f1a" --request GET https://api.memstash.io/values/url_${WorkFlowID})
            echo ${RES}
            if [[ ${MIGRATION_RESULT} -eq 1 ]]
            then
              cd backend
              npm install
              npm run migrations:revert
            fi


orbs:
  slack: circleci/slack@4.2.0
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
      - run:
          name: Compile the frontend code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install
      - run:
          name: Compile the backend code
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front end Test Install
          command: |
            cd frontend
            npm install
      - run:
          name: Front end code Run
          command: |
            cd frontend
            npm run test
      - store_test_results:
          path: ./frontend/test_results
      - store_artifacts:
          path: ./frontend/test_results

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back end Test Install
          command: |
            cd backend
            npm install
      - run:
          name: Back end code Run
          command: |
            cd backend
            npm run test
      - store_test_results:
          path: ./Backend/test_results
      - store_artifacts:
          path: ./Backend/test_results  

  analyze-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          echo $SLACK_DEFAULT_CHANNEL 
      - run:
          name: Frontend Analyze
          command: |
            cd frontend
            npm install
      - run:
          name: Analyze the Frontend code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: udacity-projects
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: udacity-projects
          event: pass
          template: success_tagged_deploy_1

  analyze-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          echo $SLACK_DEFAULT_CHANNEL 
      - run:
          name: Backendend Analyze
          command: |
            cd backend
            npm install
      - run:
          name: Analyze the Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          channel: udacity-projects
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: udacity-projects
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure that the backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${WorkFlowID}" \
              --parameter-overrides ID="${WorkFlowID}" \
              --tags project=udaPeople
            URLS=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --query "Reservations[*].Instances[*].PublicIpAddress"  --filters "Name=tag:Name,Values=backend-${WorkFlowID}"  --output text)
            echo "URLS=$URLS"
            echo "${WorkFlowID}"
            curl -H "Content-Type: text/plain" -H "token: 7de83cae-8940-4867-b238-f6888e668f1a" --request PUT --data "$URLS" https://api.memstash.io/values/url_${WorkFlowID}
      - run:
          name: Ensure that the frontend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${WorkFlowID}" \
              --parameter-overrides ID="${WorkFlowID}" \
              --tags project=udaPeople
              ARN=$(aws s3 ls | grep udapeople)
              echo "ARN=$ARN"
              curl -H "Content-Type: text/plain" -H "token: 60bcf487-712b-421c-821b-b54680a77731" --request PUT --data "$ARN" https://api.memstash.io/values/arn_${WorkFlowID}
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt


  configure-infrastructure:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout
        - attach_workspace:
            at: .
        - add_ssh_keys:
            fingerprints: ["d8:5b:b9:b0:64:bc:92:e2:7f:b6:da:62:da:e3:2c:5e"]
        - run:
            name: Install dependencies
            command: |
              apk add --update tar gzip ansible nodejs npm curl
              pip install awscli
        - run:
            name: Set up inventory file
            command: |
              cd .circleci/ansible
              echo "[web]" >> inventory.txt
              URLS=$(curl -H "token: 7de83cae-8940-4867-b238-f6888e668f1a" --request GET https://api.memstash.io/values/url_${WorkFlowID})
              echo "$URLS" >> inventory.txt
              cat inventory.txt
        - run:
            name: Configure server with ansible
            no_output_timeout: 30m
            command: |
              echo ENVIROMENT=production > "backend/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_HOST=udapeople-prod.cq4vpgr4k5w9.eu-west-2.rds.amazonaws.com >> "backend/.env"
              echo TYPEORM_PORT=5432 >> "backend/.env"
              echo TYPEORM_USERNAME=postgres >> "backend/.env"
              echo TYPEORM_PASSWORD=Ballerin_123!! >> "backend/.env"
              echo TYPEORM_DATABASE=postgres >> "backend/.env"
              cd .circleci/ansible
              ansible-playbook -i inventory.txt configure-server.yml
        

  run-migrations:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Set up env vars for migrations job
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations > migration_output.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend/
          command: |
            if grep -q "has been executed successfully" migration_output.txt
            then
              echo "migration complete"
              curl -H "Content-Type: text/plain" -H "token: 832b0a9e-0757-4297-9e0b-a0775e58e5c2" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${WorkFlowID}
            else
              echo "DB migration failure"
              curl -H "Content-Type: text/plain" -H "token: 832b0a9e-0757-4297-9e0b-a0775e58e5c2" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${WorkFlowID}
            fi
              echo "WorkflowID=${WorkFlowID}"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3-pip -y
            yum -y install curl -y
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Rebuild frontend from backend URL
          command: |
            export BACKEND_IP=$(curl -H "token: 7de83cae-8940-4867-b238-f6888e668f1a" --request GET https://api.memstash.io/values/url_${WorkFlowID})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${WorkFlowID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["d8:5b:b9:b0:64:bc:92:e2:7f:b6:da:62:da:e3:2c:5e"]
      - run:
          name: Set up env vars
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend.env
            echo TYPEORM_HOST=${TYPEORM_HOST} >> backend/.env
            echo TYPEORM_PORT=${TYPEORM_PORT} >> backend/.env
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> backend/.env
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> backend/.env
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> backend/.env
            cat backend/.env
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            URLS=$(curl -H "token: 7de83cae-8940-4867-b238-f6888e668f1a" --request GET https://api.memstash.io/values/url_${WorkFlowID})
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Deploy backend
          no_output_timeout: 10m
          command: |

            cd . 
            tar -czvf backend.tar.gz ./backend
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Smoke test on backend
          command: |
            PUBLIC_IP=$(curl -H "token: 7de83cae-8940-4867-b238-f6888e668f1a" --request GET https://api.memstash.io/values/url_${WorkFlowID})
            echo ${PUBLIC_IP}
            if curl -s "http://${PUBLIC_IP}:3030/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Smoke test on frontend
          command: |
            URL="http://udapeople-${WorkFlowID}.s3-website.eu-west-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
     # - destroy-environment:
     #     workflow_id: ${WorkFlowID}
     # - revert-migrations:
     #     workflow_id: ${WorkFlowID}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3-pip -y
            yum -y install curl -y
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text > ~/old_cloudfront_id.txt
            cat ~/old_cloudfront_id.txt
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name conor-udapeople-stack \
              --parameter-overrides ID="conor-${WorkFlowID}"
      - persist_to_workspace:
          root: ~/
          paths:
            - old_cloudfront_id.txt
      #- destroy-environment:
      #    workflow_id: ${WorkFlowID}
      #- revert-migrations:
      #    workflow_id: ${WorkFlowID}

  cleanup:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Delete old deployment
          command: |
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`ID\`].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID}
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID}" ]]
            then
              echo deleting all files at S3 bucket udapeople-${OLD_CIRCLE_WORKFLOW_ID}
              aws s3 rm s3://udapeople-${OLD_CIRCLE_WORKFLOW_ID}/ --recursive
              echo deleting stack udapeople-frontend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OLD_CIRCLE_WORKFLOW_ID}
              echo deleting stack udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID}
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environment:
          workflow_id: ${WorkFlowID}

workflows:
  default:
    jobs:
      - build-backend
      - build-frontend
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
      - analyze-backend:
          context: circleci-slack
          requires:
            - build-backend
      - analyze-frontend:
          context: circleci-slack
          requires:
            - build-frontend

      ## INFRASTRUCTURE
      - deploy-infrastructure:
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
          filters:
            branches:
              only:
                - master

      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - analyze-backend
            - analyze-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - master

      - deploy-backend:
          requires:
            - run-migrations
          filters:
            branches:
              only:
                - master

      - deploy-frontend:
          requires:
            - deploy-backend
          filters:
            branches:
              only:
                - master

      - smoke-test:
          requires:
           - deploy-frontend
           - deploy-backend
          filters:
            branches:
              only:
                - master

      - cloudfront-update:
          requires:
           - smoke-test
          filters:
            branches:
              only:
                - master

      - cleanup:
          requires: 
          - cloudfront-update
          filters:
            branches:
              only:
                - master
 

